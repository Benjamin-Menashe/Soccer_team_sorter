# -*- coding: utf-8 -*-
"""עושה_כוחות.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oydWYm0J21Bk8fCTS_HWXS6stGxus9qA

#**Random Fair Team Sorter**

###1. Rank Players:
"""

playing = {
    "ae":1,
    "ai":1,
    "ao":1,
    "au":2,
    "be":2,
    "bi":2,
    "bo":3,
    "bu":3,
    "ce":3,
    "ci":3,
    "co":3,
    "cu":3,
    "de":4,
    "di":4,
    "do":4,
    "du":4,
    "fe":4,
    "fi":4,
    "fo":5,
    "fu":5,
    "gi":5
}

#@title 2. Randomly assign teams:

import numpy as np
n = 1000
rng = np.random.default_rng()

ps = rng.permutation(21)
IDs = np.reshape(np.array(list(playing.keys()))[ps],(3,7))
teams = np.reshape(np.array(list(playing.values()))[ps],(3,7))

def Eval_loss(teams):
    vec_m = (np.mean(teams, axis=1) - (np.mean(teams)))
    loss_m = np.linalg.norm(vec_m)
    vec_s = (np.std(teams, axis=1) - np.mean(np.std(teams, axis=1)))
    loss_s = np.linalg.norm(vec_s)
    loss = loss_m + loss_s
    return loss

loss_pre = Eval_loss(teams)
jj = 0

while jj < n:   
    tm_ind = rng.choice(3, 2, replace=False)
    plr_ind = rng.choice(7, 2)
    teams2 = np.copy(teams)
    teams2[tm_ind[0]][plr_ind[0]],teams2[tm_ind[1]][plr_ind[1]] = teams[tm_ind[1]][plr_ind[1]],teams[tm_ind[0]][plr_ind[0]]
    loss_post = Eval_loss(teams2)
    if loss_post < loss_pre:
        teams = teams2
        loss_pre = loss_post
        IDs[tm_ind[0]][plr_ind[0]],IDs[tm_ind[1]][plr_ind[1]] = IDs[tm_ind[1]][plr_ind[1]],IDs[tm_ind[0]][plr_ind[0]]
    jj += 1


for i in range(3):
    print('------------------------------')
    print(f"team {i+1}:")
    print(IDs[i])
    print(np.round(np.mean(teams[i]),2), np.round(np.std(teams[i]),2))